"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
const curl = require("curlrequest");
class modlist extends discord_akairo_1.Command {
    constructor() {
        super("modlist", {
            aliases: ["skyclientmodlist", "scmodlist", "scmods", "mods", "modlist"]
        });
    }
    exec(message) {
        curl.request({ url: "https://raw.githubusercontent.com/nacrt/SkyblockClient-REPO/main/files/mods.json" }, (e, data) => {
            data = JSON.parse(data);
            const modsEmbed = new discord_js_1.MessageEmbed()
                .setColor('#9c25c4')
                .setTitle('SkyClient Mods List');
            data.forEach(element => {
                if (element.display && element.display != "no" && element.hidden != true) {
                    let mods = "";
                    if (element.display.includes("Bundle")) {
                        element.actions.forEach(e => {
                            if (e.text && e.text != "Guide") {
                                mods = mods + e.text + ", ";
                            }
                        });
                        mods = mods.substring(0, mods.length - 2);
                    }
                    else {
                        if (element.display && element.creator && element.display != "no" && element.discordcode) {
                            mods = `Creator: [${element.creator}](https://discord.gg/${element.discordcode})\nMod ID: \`${element.id}\``;
                        }
                        else {
                            mods = `Creator: ${element.creator}\nMod ID: \`${element.id}\``;
                        }
                    }
                    modsEmbed.addField(`${element.display}`, mods, true);
                }
            });
            message.channel.send(modsEmbed);
        });
    }
}
exports.default = modlist;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kbGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9za3ljbGllbnQvbW9kbGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUF5QztBQUN6QywyQ0FBMEM7QUFFMUMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBR3BDLE1BQXFCLE9BQVEsU0FBUSx3QkFBTztJQUMzQztRQUNDLEtBQUssQ0FBQyxTQUFTLEVBQUU7WUFDaEIsT0FBTyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDO1NBQ3ZFLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBTztRQUVMLElBQUksQ0FBQyxPQUFPLENBQ1IsRUFBQyxHQUFHLEVBQUUsa0ZBQWtGLEVBQUMsRUFDekYsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFFUixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV4QixNQUFNLFNBQVMsR0FBRyxJQUFJLHlCQUFZLEVBQUU7aUJBQ25DLFFBQVEsQ0FBQyxTQUFTLENBQUM7aUJBQ25CLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1lBRWhDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ25CLElBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRTtvQkFDckUsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFBO29CQUViLElBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7d0JBQ25DLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFOzRCQUV4QixJQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxPQUFPLEVBQUU7Z0NBRTVCLElBQUksR0FBRyxJQUFJLEdBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxJQUFJLENBQUE7NkJBQzFCO3dCQUNMLENBQUMsQ0FBQyxDQUFDO3dCQUNILElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFBO3FCQUMxQzt5QkFDSTt3QkFDRCxJQUFHLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsV0FBVyxFQUFFOzRCQUNyRixJQUFJLEdBQUcsYUFBYSxPQUFPLENBQUMsT0FBTyx3QkFBd0IsT0FBTyxDQUFDLFdBQVcsZ0JBQWdCLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQTt5QkFDL0c7NkJBQ0c7NEJBQ0EsSUFBSSxHQUFHLFlBQVksT0FBTyxDQUFDLE9BQU8sZUFBZSxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUE7eUJBQ2xFO3FCQUNKO29CQUVELFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO2lCQUV2RDtZQUNMLENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUNKLENBQUE7SUFDUixDQUFDO0NBQ0Q7QUFsREQsMEJBa0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCJkaXNjb3JkLWFrYWlyb1wiO1xyXG5pbXBvcnQgeyBNZXNzYWdlRW1iZWQgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5cclxuY29uc3QgY3VybCA9IHJlcXVpcmUoXCJjdXJscmVxdWVzdFwiKTtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBtb2RsaXN0IGV4dGVuZHMgQ29tbWFuZCB7XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHRzdXBlcihcIm1vZGxpc3RcIiwge1xyXG5cdFx0XHRhbGlhc2VzOiBbXCJza3ljbGllbnRtb2RsaXN0XCIsIFwic2Ntb2RsaXN0XCIsIFwic2Ntb2RzXCIsIFwibW9kc1wiLCBcIm1vZGxpc3RcIl0gXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGV4ZWMobWVzc2FnZSkge1xyXG5cclxuICAgICAgICBjdXJsLnJlcXVlc3QoXHJcbiAgICAgICAgICAgIHt1cmw6IFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL25hY3J0L1NreWJsb2NrQ2xpZW50LVJFUE8vbWFpbi9maWxlcy9tb2RzLmpzb25cIn0sIFxyXG4gICAgICAgICAgICAoZSwgZGF0YSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vZHNFbWJlZCA9IG5ldyBNZXNzYWdlRW1iZWQoKVxyXG4gICAgICAgICAgICAgICAgLnNldENvbG9yKCcjOWMyNWM0JylcclxuICAgICAgICAgICAgICAgIC5zZXRUaXRsZSgnU2t5Q2xpZW50IE1vZHMgTGlzdCcpXHJcblxyXG4gICAgICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuZGlzcGxheSAmJiBlbGVtZW50LmRpc3BsYXkgIT0gXCJub1wiICYmIGVsZW1lbnQuaGlkZGVuICE9IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vZHMgPSBcIlwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihlbGVtZW50LmRpc3BsYXkuaW5jbHVkZXMoXCJCdW5kbGVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWN0aW9ucy5mb3JFYWNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUudGV4dCAmJiBlLnRleHQgIT0gXCJHdWlkZVwiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RzID0gbW9kcytlLnRleHQrXCIsIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RzID0gbW9kcy5zdWJzdHJpbmcoMCwgbW9kcy5sZW5ndGgtMilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuZGlzcGxheSAmJiBlbGVtZW50LmNyZWF0b3IgJiYgZWxlbWVudC5kaXNwbGF5ICE9IFwibm9cIiAmJiBlbGVtZW50LmRpc2NvcmRjb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kcyA9IGBDcmVhdG9yOiBbJHtlbGVtZW50LmNyZWF0b3J9XShodHRwczovL2Rpc2NvcmQuZ2cvJHtlbGVtZW50LmRpc2NvcmRjb2RlfSlcXG5Nb2QgSUQ6IFxcYCR7ZWxlbWVudC5pZH1cXGBgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHMgPSBgQ3JlYXRvcjogJHtlbGVtZW50LmNyZWF0b3J9XFxuTW9kIElEOiBcXGAke2VsZW1lbnQuaWR9XFxgYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RzRW1iZWQuYWRkRmllbGQoYCR7ZWxlbWVudC5kaXNwbGF5fWAsIG1vZHMsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKG1vZHNFbWJlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApIFxyXG5cdH1cclxufVxyXG4iXX0=